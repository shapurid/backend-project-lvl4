- const getTranslationPath = (entity) => _.get(entity, 'translationPath');

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {})
  - const error = _.get(errors, propertyName)
  - const typeOfInput = propertyName === 'password' || propertyName === 'email' ? propertyName : 'text'
  - const valueOfInput= typeOfInput === 'password' ? '' : _.get(entity, propertyName)
  - const translationPath = getTranslationPath(entity)
  - const labelName = t(`views.${translationPath}.${propertyName}.label`)
  .form-group
    label= `${labelName}:`
    input.form-control(
      name= `form[${propertyName}]`
      type= typeOfInput
      class=`${error ? 'is-invalid' : ''}`
      value= valueOfInput
    )&attributes(attributes)
    if error
      .invalid-feedback= t(`views.${translationPath}.${propertyName}.error`)

mixin select(entity, propertyName, nameOfSelect, isMultiple=false, isForm=true)
  - const translationPath = getTranslationPath(entity)
  - const { currentTask } = entity
  - const values = entity[propertyName]
  - const selectId = `formControlSelect${nameOfSelect}`
  - const labelName = t(`views.${translationPath}.${propertyName}.label`)
  - const selectName = isForm ? `form[${nameOfSelect}]` : nameOfSelect
  .form-group
    label(for=selectId)= `${labelName}:`
    select.form-control(id=selectId name=selectName multiple=isMultiple size='2')
      for value of values
        if currentTask && +currentTask[nameOfSelect] === +value.id
          option(value=value.id selected)= value.name
        else
          option(value=value.id)= value.name

mixin textarea(entity, propertyName)
  - const translationPath = getTranslationPath(entity)
  - const labelName = t(`views.${translationPath}.${propertyName}.label`)
  label= `${labelName}:`
  .form-group
    textarea.form-control(type='text' name=`form[${propertyName}]` rows='3')

mixin submit(entity)
  - const translationPath = getTranslationPath(entity);
  button.btn.btn-primary(type='submit')&attributes(attributes)= t(`views.${translationPath}.submit`)

mixin buttonTo(entity, method)
  - const translationPath = getTranslationPath(entity);
  input(name="_method" type="hidden" value=method)
  button.btn(type='submit')&attributes(attributes)= t(`views.${translationPath}.${method}`)